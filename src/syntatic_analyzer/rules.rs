#[allow(non_camel_case_types)]
#[derive(Debug)]
pub enum Rules {
    ERROR,
    P,
    LDE_LDE,
    LDE_DE,
    DE_DF,
    DE_DT,
    T_INT,
    T_CHAR,
    T_BOOL,
    T_STRING,
    T_IDU,
    DT_ARRAY,
    DT_STRUCT,
    DT_ALIAS,
    DC_DC,      // Declaracao de campos de struct (field)
    DC_LI,      // Declaracao de campos de struct; regra nao recursiva
    DF,
    LP_LP,      // Lista de parametros de funcao
    LP_IDD,     // Lista de parametros de funcao; regra nao recursiva
    B,
    LDV_LDV,    // Lista de declaracao de variaveis
    LDV_DV,     // Lista de declaracao de variaveis; regra nao recursiva
    LS_LS,      // Lista de statements
    LS_S,       // Lista de statements; regra nao recursiva
    DV,         // Declaracao de variavle
    LI_LI,      // Lista de identificadores
    LI_IDD,     // Lista de identificadores; regra nao recursiva
    S_IF_ELSE, 
    S_IF,
    S_WHILE,
    S_DO_WHILE,
    S_NB,
    S_LV,
    S_BREAK,
    S_CONTINUE,
    S_RETURN,
    E_AND,      
    E_OR,
    E_L,
    L_LESS_THAN,
    L_GREATER_THAN,
    L_LESS_EQUAL,
    L_GREATER_EQUAL,
    L_EQUAL_EQUAL,
    L_NOT_EQUAL,
    L_R,
    R_PLUS,
    R_MINUS,
    R_Y,
    Y_TIMES,
    Y_DIVIDE,
    Y_F,
    F_LV,
    F_PLUSPLUS,
    F_MINUSMINUS,
    F_LV_PLUSPLUS,
    F_LV_MINUSMINUS,
    F_PAR_E_PAR,
    F_FUNC_CALL,
    F_NEGATIVE,
    F_NOT,
    F_TRUE,
    F_FALSE,
    F_C,
    F_STR,
    F_NUM,
    LE_LE,      // Lista de expressoes
    LE_E,       // Lista de expressoes; regra nao recursiva
    LV_STRUCT,  // Variavel dentro de uma struct     
    LV_ARR,     // Variavel dentro de um array
    LV_IDU,     // Variavel comum
    TRUE,
    FALSE,
    C,
    STR,
    NUM,
    IDD,
    IDU,
    NB,         // Marcardor semantico new block 
    MF,         // Marcador semantico de funcao
    MC,         // Marcador
    MT,
    ME,
    MW,
    NF          // Marcodor semantico new function
}

impl From<usize> for Rules {
    fn from(x: usize) -> Rules {
        match x {
            0 => Rules::P,
            1 => Rules::LDE_LDE,
            2 => Rules::LDE_DE,
            3 => Rules::DE_DF,
            4 => Rules::DE_DT,
            5 => Rules::T_INT,
            6 => Rules::T_CHAR,
            7 => Rules::T_BOOL,
            8 => Rules::T_STRING,
            9 => Rules::T_IDU,
            10 => Rules::DT_ARRAY,
            11 => Rules::DT_STRUCT,
            12 => Rules::DT_ALIAS,
            13 => Rules::DC_DC,      
            14 => Rules::DC_LI,      
            15 => Rules::DF,
            16 => Rules::LP_LP,      
            17 => Rules::LP_IDD,     
            18 => Rules::B,
            19 => Rules::LDV_LDV,    
            20 => Rules::LDV_DV,     
            21 => Rules::LS_LS,      
            22 => Rules::LS_S,       
            23 => Rules::DV,         
            24 => Rules::LI_LI,      
            25 => Rules::LI_IDD,     
            26 => Rules::S_IF_ELSE,
            27 => Rules::S_IF,
            28 => Rules::S_WHILE,
            29 => Rules::S_DO_WHILE,
            30 => Rules::S_NB,
            31 => Rules::S_LV,
            32 => Rules::S_BREAK,
            33 => Rules::S_CONTINUE,
            34 => Rules::S_RETURN,
            35 => Rules::E_AND,     
            36 => Rules::E_OR,
            37 => Rules::E_L,
            38 => Rules::L_LESS_THAN,
            39 => Rules::L_GREATER_THAN,
            40 => Rules::L_LESS_EQUAL,
            41 => Rules::L_GREATER_EQUAL,
            42 => Rules::L_EQUAL_EQUAL,
            43 => Rules::L_NOT_EQUAL,
            44 => Rules::L_R,
            45 => Rules::R_PLUS,
            46 => Rules::R_MINUS,
            47 => Rules::R_Y,
            48 => Rules::Y_TIMES,
            49 => Rules::Y_DIVIDE,
            50 => Rules::Y_F,
            51 => Rules::F_LV,
            52 => Rules::F_PLUSPLUS,
            53 => Rules::F_MINUSMINUS,
            54 => Rules::F_LV_PLUSPLUS,
            55 => Rules::F_LV_MINUSMINUS,
            56 => Rules::F_PAR_E_PAR,
            57 => Rules::F_FUNC_CALL,
            58 => Rules::F_NEGATIVE,
            59 => Rules::F_NOT,
            60 => Rules::F_TRUE,
            61 => Rules::F_FALSE,
            62 => Rules::F_C,
            63 => Rules::F_STR,
            64 => Rules::F_NUM,
            65 => Rules::LE_LE,      
            66 => Rules::LE_E,       
            67 => Rules::LV_STRUCT, 
            68 => Rules::LV_ARR,    
            69 => Rules::LV_IDU,     
            70 => Rules::TRUE,
            71 => Rules::FALSE,
            72 => Rules::C,
            73 => Rules::STR,
            74 => Rules::NUM,
            75 => Rules::IDD,
            76 => Rules::IDU,
            77 => Rules::NB,         
            78 => Rules::MF,         
            79 => Rules::MC,         
            80 => Rules::MT,
            81 => Rules::ME,
            82 => Rules::MW,
            83 => Rules::NF,
            _ => Rules::ERROR
        }
    }
}
